<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width, initial-scale=1" />
		<title>Test UI Tool - Option 1</title>
		<link rel="stylesheet" href="main.css">
	</head>
	<body onload="init()">
    	<div id="main">
        	<div id="menu">
        		<div id="menuHead">
        			<div id="title">
	        			<p>Test Tool</p>
	        		</div>
	        		<div id="icon">
	        			<img title="Title" src="images/face-icon.png" height="20px" style="margin: 0;" />
	        		</div>
        		</div>
        		<div id="menuItems">
            		<p><a href="home.html">Home</a></p>
            		<p class="disabled">Option 1</p> 
            		<p><a href="option2.html">Option 2</a></p> 
            		<p><a href="option3.html">Option 3</a></p> 
            		<p><a href="option4.html">Option 4</a></p>
            		<hr />
            		<p><a href="login.html">Login</a></p>
            	</div>
       		</div>
        	<div id="content">
        		<div id="contentHead">
        			<div id="contentTitle">
        				<p>Option 1</p>
        			</div>
        			<div class="select">
        				<select name="env" id="env" onchange="updateEnv(this)">
        			        <option value="0">VOID</option>
        			    </select></p>
        			</div>
        		</div>
        		<div id="contentBody">
        			<div id="hostView" style="display: flex;">
        				<input value="GET" type="text" id="method" style="width: 3.5em;" disabled /><span style="margin-top: .4em; margin-right: .1em">:</span>
        				<select name="host" id="host" onchange="updateHost(this)" style="border-bottom: 1px solid #c0c0c0; border-right: 1px solid #c0c0c0; background-color: #ffffff;">
        					<option title="Method: GET" value="0">VOID</option>
        				</select>
        				<button class="info" type="button" style="padding-left: 2px; background-color: #ffffff;"><img id="info" title="Information" src="images/info-icon.png" height="20px" /></button>
        				<button type="button" class="button">Send</button>
        			</div>
        			<div>
						<details>
  							<summary>Request</summary>
  							<div id="request" class="tabset">
  								<!-- Tab Headers -->
  								<input type="radio" name="tabset" id="tab-request-header" aria-controls="requestHeader" checked>
  								<label for="tab-request-header">Headers</label>
  								<!-- Tab Parameters -->
  								<input type="radio" name="tabset" id="tab-request-params" aria-controls="requestParams">
  								<label for="tab-request-params">Parameters</label>
  								<!-- Tab Body -->
  								<input type="radio" name="tabset" id="tab-request-body" aria-controls="requestBody">
  								<label for="tab-request-body">Body</label>
  
  								<div class="tab-panels">
  									<section id="requestHeader" class="tab-panel">
  									</section>
  									<section id="requestParams" class="tab-panel">
  									</section>
  									<section id="requestBody" class="tab-panel">
  									</section>
  								</div>
							</div>
						</details>
						<details>
  							<summary>Response</summary>
  							<div id="response" class="tabset">
  								<!-- Tab Headers -->
  								<input type="radio" name="tabset" id="tab-response-header" aria-controls="responseHeader" checked>
  								<label for="tab-response-header">Headers</label>
  								<!-- Tab Parameters -->
  								<input type="radio" name="tabset" id="tab-response-params" aria-controls="responseParams">
  								<label for="tab-response-params">Parameters</label>
  								<!-- Tab Body -->
  								<input type="radio" name="tabset" id="tab-response-body" aria-controls="responseBody">
  								<label for="tab-response-body">Body</label>
  
  								<div class="tab-panels">
  									<section id="responseHeader" class="tab-panel">
  									</section>
  									<section id="responseParams" class="tab-panel">
  									</section>
  									<section id="responseBody" class="tab-panel">
  									</section>
  								</div>
							</div>
						</details>
           			</div>
           		</div>
        	</div>
    	</div>

		<script>
			const current = JSON.parse('{' 
					+ '"env": -1, "func": -1'
				+ '}');
			const envs = JSON.parse('[{' 
					+ '"env": "Local", "route": "localhost:8080"'
				+ '}, {'
					+ '"env": "SIT", "route": "sit.bocaditos.co.uk"'
				+ '}, {'
					+ '"env": "OAT", "route": "oat-bocaditos.co.uk"'
				+ '}, {'
					+ '"env": "PROD", "route": "bocaditos.co.uk"'
				+ '}]');
			const funcs = JSON.parse('[{' 
					+ '"func": "customers", "method": "GET",    "info": "Gets the customer.",    "headers": [{"name": "Content-Type", "value": "application/json", "readOnly": true}, {"name": "Accept", "value": "application/json", "readOnly": true}, {"name": "Authorization", "required": true, "info": "Bearer Java Web Token (JWT)"}, {"name": "User"}], "params": [], "body": []' 
				+ '}, {'
					+ '"func": "customers", "method": "POST",   "info": "Creates the customer.", "headers": [], "params": [], "body": []'
				+ '}, {'
					+ '"func": "customers", "method": "PUT",    "info": "Updates the customer.", "headers": [], "params": [], "body": []'
				+ '}, {'
					+ '"func": "customers", "method": "PATCH",  "info": "Changes the customer.", "headers": [], "params": [], "body": []'
				+ '}, {'
					+ '"func": "customers", "method": "DELETE", "info": "Deletes the customer.", "headers": [], "params": [], "body": []'
				+ '}]');


			function init() {
				const env = document.getElementById("env");

				current.env = -1;
				current.func = -1;
				while (env.length > 0) {
					env.remove(0);
				}
				for (var i = 0; i < envs.length; i++) {
					var opt = document.createElement('option');

				    opt.value = i;
				    opt.innerHTML = envs[i].env;
				    env.appendChild(opt);
				}

				const env0 = env.options[0];

				env0.selected = 'selected';
				updateEnv(env0);
				buildRequestHeader();
				buildRequestParams();
				buildRequestBody();
			}

			function updateEnv(env) {
				const index = env.value;

				if (index != current.env) {
					console.log("Updating environment by event with index " + index + "...");

					current.env = index;
					env.value = envs[index].route;

					const hosts = document.getElementById('host');
					const route = envs[current.env].route;

					current.func = 0;
					while (hosts.length > 0) {
						hosts.remove(0);
					}
					for (var i = 0; i < funcs.length; i++) {
						var opt = document.createElement('option');
						var func = funcs[i];

					    opt.value = i;
					    opt.title = "Method: " + func.method;
					    opt.innerHTML = route + "/" + func.func;
					    hosts.appendChild(opt);
					}
					hosts.options[0].selected = 'selected';
					updateHost(host);

					console.log("Environment updated by event with index " + index);
				}
			}

			function updateHost(el) {
				const index = el.value;

				if (index != current.func) {
					console.log("Updating host by event with index " + index + "...");

					const method = document.getElementById('method');

					current.func = index;
//					host.value = envs[current.env].route + "/" + funcs[current.func];
					method.value = funcs[index].method;
					document.getElementById('info').title=funcs[index].info;

					buildRequestHeader();

					console.log("Host updated by event with index " + index);
				}
			}

			function buildRequestHeader() {
				buildRequest("requestHeader", "tab-request-header", funcs[current.func].headers);
			}

			function buildRequestParams() {
				buildRequest("requestParams", "tab-request-params", funcs[current.func].params);
			}

			function buildRequestBody() {
				buildRequest("requestBody", "tab-request-body", funcs[current.func].body);
			}

			function buildRequest(name, tabName, viewDatas) {
				const section = document.getElementById(name);

				if (section.length > 0) {
					console.log("Cleaning " + name + " request view...");
					while (section.length > 0) {
						section.remove(0);
					}
					console.log(name + " request view was cleaned");
				}

				if (viewDatas.length == 0) {
					var input = document.getElementById(tabName);

					input.disabled = true;

					return;
				}

				console.log("Building " + name + " request view...");
				for (var i = 0; i < viewDatas.length; i++) {
					section.appendChild(buildInput(viewDatas[i], i));
				}
				console.log(name + " request view was built");
			}


			function buildInput(viewData, index) {
				console.log("ViewData: {name: " + viewData.name + ", value: " + viewData.value 
						+ ", placeholder: " + viewData.placeholder 
						+ ", required: " + viewData.required
						+ ", readOnly: " + viewData.readOnly);

				var div = document.createElement('div');
				var label = document.createElement('label');
				var span = document.createElement('span');

				label.innerHTML = viewData.name;
				div.className = "header-field";
				div.appendChild(label);
				
				span.innerHTML = ":";
				div.appendChild(span);

				var input = document.createElement('input');

				input.type = 'text';
				input.id = "header" + index
				if (typeof viewData.value != 'undefined') {
					input.value = viewData.value;
					console.log("Value was set for " + viewData.name);
				}
				if (typeof viewData.required != 'undefined' && viewData.required) {
					input.required = true;
					console.log("Required was set for " + viewData.name);
				}
				if (typeof viewData.placeholder != 'undefined') {
					input.placeholder = viewData.placeholder;
					console.log("Placeholder was set for " + viewData.name);
				}
				if (typeof viewData.readOnly != 'undefined' && viewData.readOnly) {
					input.readOnly = viewData.readOnly;
					console.log("ReadOnly was set for " + viewData.name);
				}
				if (typeof viewData.pattern != 'undefined') {
					input.pattern = viewData.pattern;
				}
				div.appendChild(input);

				if (typeof viewData.info != 'undefined') {
					var info = document.createElement('button');

					info.className = "info";
					info.type = "button";

					var img = document.createElement('img');

					img.src = "images/info-icon.png";
					img.height = 20;
					img.title = viewData.info;
					info.appendChild(img);

					div.appendChild(info);
				}

				return div;
			}
		</script>
	</body>
</html>